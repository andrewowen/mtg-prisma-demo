// Code generated by Prisma (prisma@1.20.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deck: (where?: DeckWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deck: (where: DeckWhereUniqueInput) => DeckPromise;
  decks: (
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Deck>;
  decksConnection: (
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeckConnectionPromise;
  player: (where: PlayerWhereUniqueInput) => PlayerPromise;
  players: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Player>;
  playersConnection: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlayerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeck: (data: DeckCreateInput) => DeckPromise;
  updateDeck: (
    args: { data: DeckUpdateInput; where: DeckWhereUniqueInput }
  ) => DeckPromise;
  updateManyDecks: (
    args: { data: DeckUpdateManyMutationInput; where?: DeckWhereInput }
  ) => BatchPayloadPromise;
  upsertDeck: (
    args: {
      where: DeckWhereUniqueInput;
      create: DeckCreateInput;
      update: DeckUpdateInput;
    }
  ) => DeckPromise;
  deleteDeck: (where: DeckWhereUniqueInput) => DeckPromise;
  deleteManyDecks: (where?: DeckWhereInput) => BatchPayloadPromise;
  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (
    args: { data: PlayerUpdateInput; where: PlayerWhereUniqueInput }
  ) => PlayerPromise;
  updateManyPlayers: (
    args: { data: PlayerUpdateManyMutationInput; where?: PlayerWhereInput }
  ) => BatchPayloadPromise;
  upsertPlayer: (
    args: {
      where: PlayerWhereUniqueInput;
      create: PlayerCreateInput;
      update: PlayerUpdateInput;
    }
  ) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deck: (
    where?: DeckSubscriptionWhereInput
  ) => DeckSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DeckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "description_ASC"
  | "description_DESC"
  | "commander_ASC"
  | "commander_DESC"
  | "active_ASC"
  | "active_DESC"
  | "games_ASC"
  | "games_DESC"
  | "wins_ASC"
  | "wins_DESC"
  | "winPercentage_ASC"
  | "winPercentage_DESC"
  | "elo_ASC"
  | "elo_DESC"
  | "eloDelta_ASC"
  | "eloDelta_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "alias_ASC"
  | "alias_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PlayerCreateWithoutDecksInput {
  alias: String;
}

export type DeckWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlayerUpdateOneRequiredWithoutDecksInput {
  create?: PlayerCreateWithoutDecksInput;
  update?: PlayerUpdateWithoutDecksDataInput;
  upsert?: PlayerUpsertWithoutDecksInput;
  connect?: PlayerWhereUniqueInput;
}

export interface DeckWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  alias?: String;
  alias_not?: String;
  alias_in?: String[] | String;
  alias_not_in?: String[] | String;
  alias_lt?: String;
  alias_lte?: String;
  alias_gt?: String;
  alias_gte?: String;
  alias_contains?: String;
  alias_not_contains?: String;
  alias_starts_with?: String;
  alias_not_starts_with?: String;
  alias_ends_with?: String;
  alias_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  commander?: String;
  commander_not?: String;
  commander_in?: String[] | String;
  commander_not_in?: String[] | String;
  commander_lt?: String;
  commander_lte?: String;
  commander_gt?: String;
  commander_gte?: String;
  commander_contains?: String;
  commander_not_contains?: String;
  commander_starts_with?: String;
  commander_not_starts_with?: String;
  commander_ends_with?: String;
  commander_not_ends_with?: String;
  player?: PlayerWhereInput;
  active?: Boolean;
  active_not?: Boolean;
  games?: Int;
  games_not?: Int;
  games_in?: Int[] | Int;
  games_not_in?: Int[] | Int;
  games_lt?: Int;
  games_lte?: Int;
  games_gt?: Int;
  games_gte?: Int;
  wins?: Int;
  wins_not?: Int;
  wins_in?: Int[] | Int;
  wins_not_in?: Int[] | Int;
  wins_lt?: Int;
  wins_lte?: Int;
  wins_gt?: Int;
  wins_gte?: Int;
  winPercentage?: Float;
  winPercentage_not?: Float;
  winPercentage_in?: Float[] | Float;
  winPercentage_not_in?: Float[] | Float;
  winPercentage_lt?: Float;
  winPercentage_lte?: Float;
  winPercentage_gt?: Float;
  winPercentage_gte?: Float;
  elo?: Float;
  elo_not?: Float;
  elo_in?: Float[] | Float;
  elo_not_in?: Float[] | Float;
  elo_lt?: Float;
  elo_lte?: Float;
  elo_gt?: Float;
  elo_gte?: Float;
  eloDelta?: Float;
  eloDelta_not?: Float;
  eloDelta_in?: Float[] | Float;
  eloDelta_not_in?: Float[] | Float;
  eloDelta_lt?: Float;
  eloDelta_lte?: Float;
  eloDelta_gt?: Float;
  eloDelta_gte?: Float;
  AND?: DeckWhereInput[] | DeckWhereInput;
  OR?: DeckWhereInput[] | DeckWhereInput;
  NOT?: DeckWhereInput[] | DeckWhereInput;
}

export interface DeckCreateWithoutPlayerInput {
  alias: String;
  description?: String;
  commander: String;
  active: Boolean;
  games: Int;
  wins: Int;
  winPercentage: Float;
  elo: Float;
  eloDelta: Float;
}

export interface PlayerUpsertWithoutDecksInput {
  update: PlayerUpdateWithoutDecksDataInput;
  create: PlayerCreateWithoutDecksInput;
}

export interface DeckCreateManyWithoutPlayerInput {
  create?: DeckCreateWithoutPlayerInput[] | DeckCreateWithoutPlayerInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
}

export interface PlayerUpdateWithoutDecksDataInput {
  alias?: String;
}

export interface PlayerCreateInput {
  alias: String;
  decks?: DeckCreateManyWithoutPlayerInput;
}

export interface DeckSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeckWhereInput;
  AND?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  OR?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  NOT?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
}

export interface DeckUpsertWithWhereUniqueWithoutPlayerInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutPlayerDataInput;
  create: DeckCreateWithoutPlayerInput;
}

export interface DeckUpdateWithWhereUniqueWithoutPlayerInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutPlayerDataInput;
}

export interface DeckCreateInput {
  alias: String;
  description?: String;
  commander: String;
  player: PlayerCreateOneWithoutDecksInput;
  active: Boolean;
  games: Int;
  wins: Int;
  winPercentage: Float;
  elo: Float;
  eloDelta: Float;
}

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  alias?: String;
}>;

export interface PlayerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  alias?: String;
  alias_not?: String;
  alias_in?: String[] | String;
  alias_not_in?: String[] | String;
  alias_lt?: String;
  alias_lte?: String;
  alias_gt?: String;
  alias_gte?: String;
  alias_contains?: String;
  alias_not_contains?: String;
  alias_starts_with?: String;
  alias_not_starts_with?: String;
  alias_ends_with?: String;
  alias_not_ends_with?: String;
  decks_every?: DeckWhereInput;
  decks_some?: DeckWhereInput;
  decks_none?: DeckWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PlayerWhereInput[] | PlayerWhereInput;
  OR?: PlayerWhereInput[] | PlayerWhereInput;
  NOT?: PlayerWhereInput[] | PlayerWhereInput;
}

export interface DeckUpdateInput {
  alias?: String;
  description?: String;
  commander?: String;
  player?: PlayerUpdateOneRequiredWithoutDecksInput;
  active?: Boolean;
  games?: Int;
  wins?: Int;
  winPercentage?: Float;
  elo?: Float;
  eloDelta?: Float;
}

export interface DeckUpdateManyMutationInput {
  alias?: String;
  description?: String;
  commander?: String;
  active?: Boolean;
  games?: Int;
  wins?: Int;
  winPercentage?: Float;
  elo?: Float;
  eloDelta?: Float;
}

export interface PlayerCreateOneWithoutDecksInput {
  create?: PlayerCreateWithoutDecksInput;
  connect?: PlayerWhereUniqueInput;
}

export interface PlayerUpdateInput {
  alias?: String;
  decks?: DeckUpdateManyWithoutPlayerInput;
}

export interface DeckUpdateManyWithoutPlayerInput {
  create?: DeckCreateWithoutPlayerInput[] | DeckCreateWithoutPlayerInput;
  delete?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  disconnect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  update?:
    | DeckUpdateWithWhereUniqueWithoutPlayerInput[]
    | DeckUpdateWithWhereUniqueWithoutPlayerInput;
  upsert?:
    | DeckUpsertWithWhereUniqueWithoutPlayerInput[]
    | DeckUpsertWithWhereUniqueWithoutPlayerInput;
}

export interface DeckUpdateWithoutPlayerDataInput {
  alias?: String;
  description?: String;
  commander?: String;
  active?: Boolean;
  games?: Int;
  wins?: Int;
  winPercentage?: Float;
  elo?: Float;
  eloDelta?: Float;
}

export interface PlayerUpdateManyMutationInput {
  alias?: String;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlayerWhereInput;
  AND?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  OR?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  NOT?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PlayerPreviousValues {
  id: ID_Output;
  alias: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeckPreviousValues {
  id: ID_Output;
  alias: String;
  description?: String;
  commander: String;
  active: Boolean;
  games: Int;
  wins: Int;
  winPercentage: Float;
  elo: Float;
  eloDelta: Float;
}

export interface DeckPreviousValuesPromise
  extends Promise<DeckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  description: () => Promise<String>;
  commander: () => Promise<String>;
  active: () => Promise<Boolean>;
  games: () => Promise<Int>;
  wins: () => Promise<Int>;
  winPercentage: () => Promise<Float>;
  elo: () => Promise<Float>;
  eloDelta: () => Promise<Float>;
}

export interface DeckPreviousValuesSubscription
  extends Promise<AsyncIterator<DeckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  commander: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  games: () => Promise<AsyncIterator<Int>>;
  wins: () => Promise<AsyncIterator<Int>>;
  winPercentage: () => Promise<AsyncIterator<Float>>;
  elo: () => Promise<AsyncIterator<Float>>;
  eloDelta: () => Promise<AsyncIterator<Float>>;
}

export interface Deck {
  id: ID_Output;
  alias: String;
  description?: String;
  commander: String;
  active: Boolean;
  games: Int;
  wins: Int;
  winPercentage: Float;
  elo: Float;
  eloDelta: Float;
}

export interface DeckPromise extends Promise<Deck>, Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  description: () => Promise<String>;
  commander: () => Promise<String>;
  player: <T = Player>() => T;
  active: () => Promise<Boolean>;
  games: () => Promise<Int>;
  wins: () => Promise<Int>;
  winPercentage: () => Promise<Float>;
  elo: () => Promise<Float>;
  eloDelta: () => Promise<Float>;
}

export interface DeckSubscription
  extends Promise<AsyncIterator<Deck>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  commander: () => Promise<AsyncIterator<String>>;
  player: <T = PlayerSubscription>() => T;
  active: () => Promise<AsyncIterator<Boolean>>;
  games: () => Promise<AsyncIterator<Int>>;
  wins: () => Promise<AsyncIterator<Int>>;
  winPercentage: () => Promise<AsyncIterator<Float>>;
  elo: () => Promise<AsyncIterator<Float>>;
  eloDelta: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateDeck {
  count: Int;
}

export interface AggregateDeckPromise
  extends Promise<AggregateDeck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeckSubscription
  extends Promise<AsyncIterator<AggregateDeck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Player>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValues>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface Player {
  id: ID_Output;
  alias: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  id: () => Promise<ID_Output>;
  alias: () => Promise<String>;
  decks: <T = FragmentableArray<Deck>>(
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  alias: () => Promise<AsyncIterator<String>>;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(
    args?: {
      where?: DeckWhereInput;
      orderBy?: DeckOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeckConnection {}

export interface DeckConnectionPromise
  extends Promise<DeckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<DeckEdge>>() => T;
  aggregate: <T = AggregateDeck>() => T;
}

export interface DeckConnectionSubscription
  extends Promise<AsyncIterator<DeckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeckSubscription>() => T;
}

export interface DeckSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DeckSubscriptionPayloadPromise
  extends Promise<DeckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Deck>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeckPreviousValues>() => T;
}

export interface DeckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeckPreviousValuesSubscription>() => T;
}

export interface DeckEdge {
  cursor: String;
}

export interface DeckEdgePromise extends Promise<DeckEdge>, Fragmentable {
  node: <T = Deck>() => T;
  cursor: () => Promise<String>;
}

export interface DeckEdgeSubscription
  extends Promise<AsyncIterator<DeckEdge>>,
    Fragmentable {
  node: <T = DeckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlayerConnection {}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayer>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface PlayerEdge {
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = Player>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
